// Generated by `bun init`

declare module "*.svg" {
  /**
   * A path to the SVG file
   */
  const path: `${string}.svg`;
  export = path;
}

declare module "*.module.css" {
  /**
   * A record of class names to their corresponding CSS module classes
   */
  const classes: { readonly [key: string]: string };
  export = classes;
}

declare module "*.html" {
  /**
   * Raw string contents of the HTML file. Bun converts HTML imports into
   * strings that can be served directly via Bun's `serve`.
   */
  const html: string;
  export default html;
}

export {};

/**
 * Helper utility type for Bun route handlers where `Request` objects are
 * augmented with a `params` property containing path parameters.
 *
 * Declared in the global namespace so it can be used anywhere without an
 * explicit import statement.
 */
declare global {
  type BunRequest<P extends Record<string, string> = Record<string, string>> =
    Request & { params: P };
}

// ---------------------------------------------------------------------------
// Minimal ambient declarations to satisfy TypeScript when node_modules types
// are not installed in the execution environment (e.g., online sandboxes).
// If real type packages are present, these are overridden and cause no harm.
// ---------------------------------------------------------------------------

declare module "react" {
  export const Fragment: unknown;
  export type ReactElement = any;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export function createElement(type: any, props: any, ...children: any[]): any;
  // Hooks
  export function useState<T>(init: T): [T, (val: T) => void];
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export function useMemo<T>(factory: () => T, deps: any[]): T;
  const React: {
    createElement: typeof createElement;
    Fragment: typeof Fragment;
    useState: typeof useState;
    useMemo: typeof useMemo;
  };
  export default React;
}

declare module "react/jsx-runtime" {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export const jsx: any;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export const jsxs: any;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export const Fragment: any;
}

declare module "bun" {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  export function serve(options: any): any;
}

import type { DetailedHTMLProps, HTMLAttributes } from "react";

declare namespace JSX {
  interface IntrinsicElements {
    div: DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
    span: DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
    input: DetailedHTMLProps<HTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    button: DetailedHTMLProps<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    table: DetailedHTMLProps<HTMLAttributes<HTMLTableElement>, HTMLTableElement>;
    thead: DetailedHTMLProps<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
    tbody: DetailedHTMLProps<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
    tr: DetailedHTMLProps<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
    td: DetailedHTMLProps<HTMLAttributes<HTMLTableCellElement>, HTMLTableCellElement>;
    th: DetailedHTMLProps<HTMLAttributes<HTMLTableCellElement>, HTMLTableCellElement>;
    h1: DetailedHTMLProps<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
    h2: DetailedHTMLProps<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
    h3: DetailedHTMLProps<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
    p: DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
    img: DetailedHTMLProps<HTMLAttributes<HTMLImageElement>, HTMLImageElement>;
    a: DetailedHTMLProps<HTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
    svg: DetailedHTMLProps<HTMLAttributes<SVGSVGElement>, SVGSVGElement>;
  }
}

declare const process: {
  env: Record<string, string | undefined>;
};
